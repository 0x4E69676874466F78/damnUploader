/**
 * jQuery-плагин, облегчающий загрузку файлов на сервер.
 *
 * Принцип работы: инициируется для input type="file", либо для контейнера, куда можно будет
 * перетаскивать файлы, однако и в первом случае можно указать контейнер, который также
 * будет принимать перетаскиваемые файлы помимо стандартного поля выбора.
 * Если загрузка файлов через file API невозможна, то при вызове метода начала загрузки, просто
 * будет инициирована отправка формы, содержащей поле выбора.
 *
 * Данное расширение также добавляет свойства в стандартный jQuery-объект $.support,
 * позволяющие проверить степень поддержки браузером File API:
 * $.support.fileSelecting - возможность выбора и загрузки файлов через File API
 * $.support.fileReading   - возможность прочитать содержимое файла на стороне клиента
 * $.support.fileSending   - возможность отправки файла при помощи FormData (как рекомендует W3C),
 *                           однако, если содержит false, загрузка будет выполнена при помощи
 *                           ручной формировки тела запроса
 * $.support.uploadControl - возможность следить за процессом загрузки (индикация выполнения)
 *
 *
 * **********************
 * ПРИМЕР ИСПОЛЬЗОВАНИЯ:
 * $("input[type='file']").damnUploader({
 *     url: './serverLogic.php',
 *     dropBox: $("#drop-files-here"),
 *     onAllComplete :function() {
 *         alert('ready!');
 *     }
 * });
 *
 * **********************
 * ПРИНИМАЕМЫЕ ПАРАМЕТРЫ (в скобках - значения по умолч.):
 *
 * url       - адрес, куда будут отправляться файлы ('upload.php')
 * multiple  - возможность выбора нескольких файлов (true)
 * fieldName - имитация имени поля с файлом, кторое будет ключом в $_FILES, если используется PHP ('file')
 * dropping  - вкл./выключить drag'n'drop файлов. Имеет смысл, если передается параметр dropBox (false)
 * dropBox   - jQuery-набор или селектор, содержащий контейнер, на который можно перетаскивать файлы (null)
 * limit     - максимальное допустимое кол-во файлов в очереди, если параметр multiple включен (false - неограниченно)
 *
 * **********************
 * ОБРАБОТЧИКИ СОБЫТИЙ (в скобках - параметры, передаваемые в функцию обратного вызова):
 *
 * onSelect(file - встроенный объект File)
 * вызывается при выборе файла, если выбирается сразу несколько,
 * то для каждого вызывается отдельно. Если функция возвращает false, то файл не добавляется в очередь
 * автоматически, благодаря чему можно получить контроль над добавлением файлов, назначая каждому
 * свои обработчики событий onComplete и onProgress (см. метод addItem)
 *
 * onLimitExceeded ()
 * вызывается, если превышен лимит, установленный параметром limit
 *
 * onAllComplete ()
 * вызывается, когда вся очередь загружена
 *
 * **********************
 * МЕТОДЫ.
 *
 * // Пример вызова:
 * var myUploader = $("input[type='file']").damnUploader({
 *     url: './serverLogic.php'
 * });
 * myUploader.damnUploader('addItem', uploadItem);
 * // здесь вызывается метод addItem, который добавляет в очередь специально подготовленный объект для загрузки
 *
 * ОПИСАНИЕ МЕТОДОВ:
 *
 * damnUploader('addItem', uploadItem)
 * добавляет в очередь специально подготовленный объект для загрузки,
 * содержащий встроенный объект File и функции обратного вызова (необязательно).
 * Метод возвращает уникальный id, присвоенный данному объекту (по которому можно,
 * например, отменить загрузку конкретного файла).
 * В следующем примере перехватывается стандартное добавление файла в очередь и создается собственный объект загрузки:
 * $("input[type='file']").damnUploader({
 *     onSelect: function(file) {
 *         var uploadId = this.damnUploader('addItem', {
 *             file: file,
 *             onProgress: function(percents) { .. Some code, updating progress info .. },
 *             onComplete: function(successfully, data, errorCode) {
 *                 if (successfully) {
 *                     alert('Файл '+file.name+' загружен, полученные данные: '+data);
 *                 } else {
 *                     alert('Ошибка при загрузке. Код ошибки: '+errorCode); // errorCode содержит код HTTP-ответа, либо 0 при проблеме с соединением
 *                 }
 *             }
 *         });
 *         return false; // отменить стандартную обработку выбора файла
 *     }
 * });
 *
 * damnUploader('startUpload')
 * начать загрузку файлов
 *
 * damnUploader('itemsCount')
 * возвращает кол-во файлов в очереди
 *
 * damnUploader('cancelAll')
 * остановить все текущие загрузки и удалить все файлы из очереди
 *
 * damnUploader('cancel', queueId)
 * отменяет загрузку для файла queueId (queueId возвращается методом addItem)
 *
 * damnUploader('setParam', paramsArray)
 * изменить один, или несколько параметров. Например:
 * myUploader.setParam({
 *     url: 'anotherWay.php'
 * });
 */